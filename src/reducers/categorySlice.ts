import {PayloadAction, createAsyncThunk, createSlice} from '@reduxjs/toolkit';

import dataService from 'services/dataService';

// Define a type for the slice state
interface CategoryState {
  list: Category[];
  current?: Category;
}

// Define the initial state using that type
const initialState: CategoryState = {
  list: [],
  current: undefined
};

export const loadCategories = createAsyncThunk('category/fetchCategories', async (_, thunkAPI) => {
  try {
    const response = await dataService.getCategories();
    // The value we return becomes the `fulfilled` action payload
    return response;
  } catch (err) {
    return thunkAPI.rejectWithValue('Test Error');
  }
});

export const categorySlice = createSlice({
  name: 'category',
  // `createSlice` will infer the state type from the `initialState` argument
  initialState,
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    createCategory: (state, action: PayloadAction<Category>) => {
      state.list.push(action.payload);
    },
    updateCategory: (state, action: PayloadAction<Category>) => {
      const index = state.list.findIndex(category => category.id === action.payload.id);

      if (index !== -1) {
        state.list[index] = action.payload;
      }
    },
    deleteCategory: (state, action: PayloadAction<number>) => {
      const newList = state.list.filter(category => category.id !== action.payload);
      state.list = newList;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [loadCategories.fulfilled.type]: (state, action: PayloadAction<Category[]>) => {
      state.list = action.payload;
    },
    [loadCategories.pending.type]: (state, action) => {
      //handle loading state
    },
    [loadCategories.rejected.type]: (state, action) => {
      //handle error state
      console.log(action.payload);
    }
  }
});

export const {createCategory, updateCategory, deleteCategory} = categorySlice.actions;

export default categorySlice.reducer;
